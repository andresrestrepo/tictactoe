{"version":3,"sources":["stores/GameStore.js","stores/ConfigStore.js","components/Board/Board.js","components/Score/Score.js","App.js","serviceWorker.js","index.js"],"names":["createGameStore","tableBoard","nextOne","setNextOne","value","this","player1Wins","player2Wins","incPlayer1Wins","incPlayer2Wins","haveWinner","setHaveWinner","lastChampion","setlastChampion","storeContext","React","createContext","StoreProvider","_ref","children","store","useLocalStore","react_default","a","createElement","Provider","useStore","useContext","Error","Board","observer","alert","useAlert","checkColumn","column","item1","item2","item3","checkRow","row","checkDiagonal","direction","resetBoard","map","fill","handleSquareClick","event","col","target","getAttribute","isWinnerByColumn","_i","_arr","length","isWinnerByRow","_i2","_arr2","isWinnerByDiagonal1","isWinnerByDiagonal2","checkBoard","show","scrollToBottom","setTimeout","isComplete","item","isBoardComplete","scroll","className","index_esm","title","onClick","size","rows","rowIndex","cell","key","concat","Score","props","useSpring","to","opacity","marginTop","from","reset","config","wobbly","nextPlayerIcon","champion","web","div","style","championImage","Row","Col","xs","Badge","color","options","position","positions","TOP_CENTER","timeout","offset","transition","transitions","SCALE","App","marginLeft","slow","ConfigStore_StoreProvider","react_alert","Object","assign","template","AlertTemplate","Container","sm","md","components_Board_Board","components_Score_Score","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6ed5d488.chunk.js","sourcesContent":["export function createGameStore() {\n\n    return {\n        tableBoard: [\n            [\"\", \"\", \"\"],\n            [\"\", \"\", \"\"],\n            [\"\", \"\", \"\"]\n        ],\n        nextOne: \"x\",\n        setNextOne(value) {\n            this.nextOne = value;\n        },\n\n        player1Wins: 0,\n        player2Wins: 0,\n        incPlayer1Wins() {\n            this.player1Wins++;\n        }, \n        incPlayer2Wins() {\n            this.player2Wins++;\n        },\n        haveWinner: false,\n        setHaveWinner(value){\n            this.haveWinner = value;\n        },\n        lastChampion: \"\",\n        setlastChampion(value){\n            this.lastChampion = value\n        }\n\n    }\n}","import React from 'react'\nimport { createGameStore } from './GameStore'\nimport { useLocalStore } from 'mobx-react-lite'\n\nconst storeContext = React.createContext();\n\nexport const StoreProvider = ({ children }) => {\n  const store = useLocalStore(createGameStore)\n  return <storeContext.Provider value={store}>{children}</storeContext.Provider>\n}\n\nexport const useStore = () => {\n  const store = React.useContext(storeContext)\n  if (!store) {\n    throw new Error('You have forgot to use StoreProvider, shame on you.')\n  }\n  return store\n}","\nimport React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { useStore } from '../../stores/ConfigStore';\nimport './Board.css';\nimport { FaTimes } from 'react-icons/fa';\nimport { FaCircleNotch } from 'react-icons/fa';\nimport { FaRedoAlt } from 'react-icons/fa';\nimport { animateScroll as scroll } from 'react-scroll'\nimport { useAlert } from 'react-alert'\n\n\nconst Board = observer(() => {\n\n    const store = useStore();\n    const alert = useAlert()\n\n    const checkColumn = column => {\n        const item1 = store.tableBoard[0][column];\n        const item2 = store.tableBoard[1][column];\n        const item3 = store.tableBoard[2][column];\n        if (item1 === \"\" || item2 === \"\" || item3 === \"\") return false;\n        return item1 === item2 && item1 === item3;\n    }\n\n    const checkRow = row => {\n        const item1 = store.tableBoard[row][0];\n        const item2 = store.tableBoard[row][1];\n        const item3 = store.tableBoard[row][2];\n        if (item1 === \"\" || item2 === \"\" || item3 === \"\") return false;\n        return item1 === item2 && item1 === item3;\n    }\n\n    const checkDiagonal = direction => {\n        let item1 = \"\";\n        let item2 = \"\";\n        let item3 = \"\";\n        if (direction === 1) {\n            item1 = store.tableBoard[0][0];\n            item2 = store.tableBoard[1][1];\n            item3 = store.tableBoard[2][2];\n        } else if (direction === 2) {\n            item1 = store.tableBoard[0][2];\n            item2 = store.tableBoard[1][1];\n            item3 = store.tableBoard[2][0];\n        } else {\n            return false;\n        }\n\n        if (item1 === \"\" || item2 === \"\" || item3 === \"\") return false;\n        return item1 === item2 && item1 === item3;\n    }\n\n    const checkBoard = () => {\n\n        let isWinnerByColumn = false;\n        for (let i of [0, 1, 2]) {\n            isWinnerByColumn = checkColumn(i);\n            if (isWinnerByColumn) break;\n        }\n\n        let isWinnerByRow = false;\n        for (let i of [0, 1, 2]) {\n            isWinnerByRow = checkRow(i);\n            if (isWinnerByRow) break;\n        }\n\n        let isWinnerByDiagonal1 = checkDiagonal(1);\n        let isWinnerByDiagonal2 = checkDiagonal(2);\n\n        return isWinnerByColumn || isWinnerByRow || isWinnerByDiagonal1 || isWinnerByDiagonal2;\n    }\n\n    const resetBoard = () => {\n        store.tableBoard.map(row => {\n            return row.fill(\"\", 0, 3);\n        })\n        store.setNextOne(\"x\");\n        store.setHaveWinner(false);\n        store.setlastChampion(\"\");\n    }\n\n    const isBoardComplete = () => {\n        let isComplete = true;\n        store.tableBoard.map(row => {\n            row.map(item => {\n                if (item === \"\") {\n                    isComplete = false;\n                }\n                return item;\n            })\n            return row;\n        })\n        return isComplete;\n    }\n\n    const handleSquareClick = event => {\n        if (store.haveWinner) return;\n        const col = event.target.getAttribute(\"col\");\n        const row = event.target.getAttribute(\"row\");\n\n        if (row === null || col === null) return;\n        if (store.tableBoard[row][col] !== \"\") return;\n        store.tableBoard[row][col] = store.nextOne;\n        const haveWinner = checkBoard();\n        if (haveWinner) {\n            alert.show('We have a winner!');\n            scrollToBottom();\n            if (store.nextOne === \"x\") {\n                store.incPlayer1Wins();\n                store.setlastChampion(\"x\");\n            } else {\n                store.incPlayer2Wins();\n                store.setlastChampion(\"o\");\n            }\n            store.setHaveWinner(true);\n            setTimeout(() => {\n                resetBoard();\n            }, 3000)\n        } else {\n            if (isBoardComplete()) {\n                alert.show('We have a tie!');\n                setTimeout(() => {\n                    resetBoard();\n                }, 3000)\n            } else {\n                let nextOne = store.nextOne === \"x\" ? \"o\" : \"x\";\n                store.setNextOne(nextOne);\n            }\n        }\n    }\n\n    const getRows = () => {\n        return store.tableBoard.map((rows, rowIndex) => {\n            let row = rows.map((cell, column) => <div onClick={handleSquareClick} key={`${column}-${rowIndex}`} col={column} row={rowIndex} className=\"square\">\n                {cell === \"x\" ? <div><FaTimes size=\"60px\"></FaTimes></div> :\n                    cell === \"o\" ? <div><FaCircleNotch size=\"60px\"></FaCircleNotch></div> : \"\"}\n\n            </div>)\n            return <div key={rowIndex} className=\"game-row\">{row}</div>\n        })\n    }\n\n    const scrollToBottom = () => scroll.scrollToBottom();\n\n    return (\n        <div className=\"board\">\n            <div className=\"clear-icon\"><FaRedoAlt title=\"Reset\" onClick={resetBoard} size=\"25px\"></FaRedoAlt></div>\n            {getRows()}\n        </div>\n    )\n});\n\nexport default Board;","import React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport './Score.css'\nimport { Row, Col, Badge } from 'reactstrap';\nimport { useStore } from '../../stores/ConfigStore';\nimport { FaTimes } from 'react-icons/fa';\nimport { FaCircleNotch } from 'react-icons/fa';\nimport { FaTrophy } from 'react-icons/fa';\nimport { useSpring, animated, config } from 'react-spring'\n\n\nconst Score = observer(() => {\n    const store = useStore();\n    const props = useSpring({\n        to: { opacity: 1, marginTop: 0 },\n        from: { opacity: 0, marginTop: -1000 },\n        reset: true,\n        config: config.wobbly\n    })\n\n    const iconSize = \"22px\";\n\n    const nextPlayerIcon = store.nextOne === \"x\" ? <FaTimes size={iconSize}></FaTimes> :\n        store.nextOne === \"o\" ? <FaCircleNotch size={iconSize}></FaCircleNotch> : \"\"\n\n    const champion = store.haveWinner ? <animated.div style={props}>\n        <div className=\"win-message\">Champion!!!</div>\n    </animated.div> : \"\";\n    const championImage = store.lastChampion === \"x\" ? <FaTimes size=\"30px\"></FaTimes> :\n        store.lastChampion === \"o\" ? <FaCircleNotch size=\"30px\"></FaCircleNotch> : \"\"\n    return (\n\n        <div className=\"score\">\n            <div className=\"information-title\">Information</div>\n            <Row>\n                <Col xs=\"6\">Player 1:</Col>\n                <Col xs=\"6\"><FaTimes size={iconSize}></FaTimes></Col>\n            </Row>\n            <Row>\n                <Col xs=\"6\">Player 2:</Col>\n                <Col xs=\"6\"><FaCircleNotch size={iconSize}></FaCircleNotch></Col>\n            </Row><br></br>\n            <Row>\n                <Col xs=\"6\">Next Player:</Col>\n                <Col xs=\"6\"><div className=\"container-next-player-icon\">{nextPlayerIcon}</div></Col>\n            </Row><br></br>\n\n            <Row>\n                <Col xs=\"6\">Player 1 wins:</Col>\n                <Col xs=\"6\"><Badge color=\"primary\">{store.player1Wins}</Badge></Col>\n            </Row>\n            <Row>\n                <Col xs=\"6\">Player 2 wins:</Col>\n                <Col xs=\"6\"><Badge color=\"primary\">{store.player2Wins}</Badge></Col>\n            </Row><br></br>\n            <div className=\"container-champion\">\n                {champion}\n                {championImage}\n                <FaTrophy size=\"30px\"></FaTrophy>\n            </div>\n\n        </div >\n    )\n})\n\nexport default Score","import React from 'react';\nimport './App.css';\nimport Board from './components/Board/Board'\nimport { StoreProvider } from './stores/ConfigStore'\nimport { Container } from 'reactstrap';\nimport Score from './components/Score/Score';\nimport { Row, Col } from 'reactstrap';\n\nimport { transitions, positions, Provider as AlertProvider } from 'react-alert'\nimport AlertTemplate from 'react-alert-template-basic'\nimport { useSpring, animated, config } from 'react-spring'\n\nconst options = {\n  position: positions.TOP_CENTER,\n  timeout: 3000,\n  offset: '30px',\n  transition: transitions.SCALE\n}\n\nfunction App() {\n  const props = useSpring({\n    to: { opacity: 1, marginLeft: 0 },\n    from: { opacity: 0, marginLeft: -1000 },\n    config: config.slow\n  })\n  return (\n    <StoreProvider>\n      <AlertProvider template={AlertTemplate} {...options}>\n        <Container>\n          <animated.div style={props}>\n          <div className=\"title\">TicTacToe</div>    </animated.div>\n          <Row>\n            <Col sm=\"12\" md=\"6\">\n              <div>\n                <Board></Board>\n              </div>\n            </Col>\n            <Col sm=\"12\" md=\"6\">\n              <Score></Score>\n            </Col>\n          </Row>\n        </Container>\n      </AlertProvider>\n    </StoreProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}